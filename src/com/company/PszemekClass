package com.company;

import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class PszemekClass {

    public static final String FILE_PATH = "C:\\Users\\Elka\\IdeaProjects\\ClassLoaderHello\\src\\com\\company\\tmp\\Test.java";
    public static final String CLASS_FOLDER_PATH = "C:\\Users\\Elka\\IdeaProjects\\ClassLoaderHello\\src\\";
    public static final String TEST_STRING_1 = "package com.company.tmp; public class Test { public void a() { System.out.println(\"a\"); } }";
    public static final String TEST_STRING_2 = "package com.company.tmp; public class Test { public void a() { System.out.println(\"b\"); } }";

    static interface Doer {
        void doSth() throws InvocationTargetException, IllegalAccessException;
    }

    static void compile(String name) throws IOException {

        List<File> names = new ArrayList<>();
        names.add(new File(name));

        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);

        Iterable<? extends JavaFileObject> compilationUnits1 =
                fileManager.getJavaFileObjectsFromFiles(names);
        compiler.getTask(null, fileManager, null, null, null, compilationUnits1).call();

        fileManager.close();
    }

    public static void main(String[] args) throws IOException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {

        runCodeInput(TEST_STRING_1, "com.company.tmp.Test");
        runCodeInput(TEST_STRING_2, "com.company.tmp.Test");
    }

    private static Doer run(String classPath, String className, String methodName) throws MalformedURLException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
        URL[] urls = {new URL("file:"+classPath)};
        final URLClassLoader urlClassLoader = new URLClassLoader(urls);
        Class<?> aClass = urlClassLoader.loadClass(className);
        final Method method = aClass.getMethod(methodName);
        final Object o = aClass.newInstance();
        Doer doer = new Doer() {
            @Override
            public void doSth() throws InvocationTargetException, IllegalAccessException {
                method.invoke(o);
            }
        };
        doer.doSth();
        return doer;
    }

    private static void runCodeInput(String code, String className) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException, IOException, ClassNotFoundException {
        compileCodeInput(code);
        run(CLASS_FOLDER_PATH, className, "a");
    }

    private static void compileCodeInput(String code) throws IOException {
        Files.write(Paths.get(FILE_PATH),code.getBytes());
        compile(FILE_PATH);
    }
}
